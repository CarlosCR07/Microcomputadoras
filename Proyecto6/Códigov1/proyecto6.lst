CCS PCM C Compiler, Version 5.076, 2401               16-jun.-23 12:06

               Filename:   D:\carlo\Documentos\FI\8vo Semestre\Micro-computadoras\Microcomputadoras\Proyecto6\Códigov1\proyecto6.lst

               ROM used:   683 words (8%)
                           Largest free fragment is 2048
               RAM used:   16 (4%) at main() level
                           34 (9%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   20F
0003:  NOP
.................... #include <16F877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA A0,20
000D:  DATA 6C,3A
000E:  DATA 6F,10
000F:  DATA 0A,10
0010:  DATA 00,00
0011:  DATA 20,10
0012:  DATA CE,34
0013:  DATA F6,32
0014:  DATA 6C,10
0015:  DATA 31,10
0016:  DATA 0A,10
0017:  DATA 00,01
0018:  DATA 20,10
0019:  DATA CE,34
001A:  DATA F6,32
001B:  DATA 6C,10
001C:  DATA 32,10
001D:  DATA 0A,10
001E:  DATA 00,01
001F:  DATA 20,10
0020:  DATA CE,34
0021:  DATA F6,32
0022:  DATA 6C,10
0023:  DATA 33,10
0024:  DATA 0A,10
0025:  DATA 00,00
*
016A:  MOVF   0B,W
016B:  MOVWF  2B
016C:  BCF    0B.7
016D:  BSF    03.5
016E:  BSF    03.6
016F:  BSF    0C.7
0170:  BSF    0C.0
0171:  NOP
0172:  NOP
0173:  BCF    03.5
0174:  BCF    03.6
0175:  BTFSC  2B.7
0176:  BSF    0B.7
0177:  BSF    03.6
0178:  MOVF   0C,W
0179:  ANDLW  7F
017A:  BTFSC  03.2
017B:  GOTO   1BE
017C:  BCF    03.6
017D:  MOVWF  2B
017E:  BSF    03.6
017F:  MOVF   0D,W
0180:  BCF    03.6
0181:  MOVWF  2C
0182:  BSF    03.6
0183:  MOVF   0F,W
0184:  BCF    03.6
0185:  MOVWF  2D
0186:  MOVF   2B,W
0187:  MOVWF  2E
0188:  CALL   145
0189:  MOVF   2C,W
018A:  BSF    03.6
018B:  MOVWF  0D
018C:  BCF    03.6
018D:  MOVF   2D,W
018E:  BSF    03.6
018F:  MOVWF  0F
0190:  BCF    03.6
0191:  MOVF   0B,W
0192:  MOVWF  2E
0193:  BCF    0B.7
0194:  BSF    03.5
0195:  BSF    03.6
0196:  BSF    0C.7
0197:  BSF    0C.0
0198:  NOP
0199:  NOP
019A:  BCF    03.5
019B:  BCF    03.6
019C:  BTFSC  2E.7
019D:  BSF    0B.7
019E:  BSF    03.6
019F:  RLF    0C,W
01A0:  RLF    0E,W
01A1:  ANDLW  7F
01A2:  BTFSC  03.2
01A3:  GOTO   1BE
01A4:  BCF    03.6
01A5:  MOVWF  2B
01A6:  BSF    03.6
01A7:  MOVF   0D,W
01A8:  BCF    03.6
01A9:  MOVWF  2C
01AA:  BSF    03.6
01AB:  MOVF   0F,W
01AC:  BCF    03.6
01AD:  MOVWF  2D
01AE:  MOVF   2B,W
01AF:  MOVWF  2E
01B0:  CALL   145
01B1:  MOVF   2C,W
01B2:  BSF    03.6
01B3:  MOVWF  0D
01B4:  BCF    03.6
01B5:  MOVF   2D,W
01B6:  BSF    03.6
01B7:  MOVWF  0F
01B8:  INCF   0D,F
01B9:  BTFSC  03.2
01BA:  INCF   0F,F
01BB:  BCF    03.6
01BC:  GOTO   16A
01BD:  BSF    03.6
01BE:  BCF    03.6
01BF:  RETURN
....................  
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPROTECT 
.................... #use delay(clock=20000000) 
*
0026:  MOVLW  2F
0027:  MOVWF  04
0028:  BCF    03.7
0029:  MOVF   00,W
002A:  BTFSC  03.2
002B:  GOTO   039
002C:  MOVLW  06
002D:  MOVWF  78
002E:  CLRF   77
002F:  DECFSZ 77,F
0030:  GOTO   02F
0031:  DECFSZ 78,F
0032:  GOTO   02E
0033:  MOVLW  7B
0034:  MOVWF  77
0035:  DECFSZ 77,F
0036:  GOTO   035
0037:  DECFSZ 00,F
0038:  GOTO   02C
0039:  RETURN
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7)  
.................... #use i2c(MASTER, SDA=PIN_C4, SCL=PIN_C3,SLOW, NOFORCE_SW)//configuraci{on de comunicaci{on maestro y esclavo 
003A:  BCF    14.7
003B:  BCF    0C.3
003C:  MOVF   3C,W
003D:  MOVWF  13
003E:  MOVLW  02
003F:  BTFSC  14.7
0040:  GOTO   048
0041:  BTFSS  0C.3
0042:  GOTO   041
0043:  MOVLW  00
0044:  BSF    03.5
0045:  BTFSC  11.6
0046:  MOVLW  01
0047:  BCF    03.5
0048:  MOVWF  78
0049:  RETURN
.................... #include <i2c_Flex_LCD.c>                                   //LCD 
.................... //-----------------------------------------------------------------------------  
.................... // Title:         i2c_Flex_LCD  
.................... // Description:   Driver for common LCD with 1/2/3 or 4 rows by 1...20 columns  
.................... //                using PCF8574T interface board with I2C protocol.  
.................... // Date:          Nov-2013  
.................... // Ver.Rev.:      1.1  
.................... // Author:        Hugo Silva (sergio-hugo@bol.com.br) #Based on the routines of  
.................... //                "20X4_LCD_I2C_DRIVER.h" from Pumrin S. and "lcd4_i2c.c" from XP8100  
.................... //-----------------------------------------------------------------------------  
.................... //  
.................... // lcd_init() Must be called before any other function.  
.................... //  
.................... // lcd_putc(c) Will display c on the next position of the LCD.  
.................... //   
.................... //     \f Clear LCD display  
.................... //     \n Set write position on next lcd line  
.................... //     \b LCD backspace  
.................... //     lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)  
.................... //  
.................... // lcd_backlight_led(ON)/lcd_backlight_led(OFF) = Turn ON/OFF LCD Backlight LED  
.................... //  
.................... //-----------------------------------------------------------------------------  
.................... // LCD pins D0-D3 are not used.  
.................... //-----------------------------------------------------------------------------  
.................... //  
.................... // Comment   : Control of a compatible LCD (1...4 rows by 1...4 columns) from  
.................... //              a bus I2C with an EXPANDER of I/O with connection I2C.  
.................... //              The tests of these routines have been programmed using the IC  
.................... //              Phillips PCF8574T. I've used 4 bits mode programming.  
.................... //              The 8 bits mode programming is possible if you use 2 x PCF8574T.  
.................... //              RW Pin is not being used.  
.................... //  
.................... // As defined in the following structure the pin connection is as follows:  
.................... //  
.................... //  PCF8574P     LCD  
.................... //  ========     ======  
.................... //     P0        RS  
.................... //     P1        RW    (Not used!)  
.................... //     P2        Enable   
.................... //     P3        Led Backlight  
.................... //     P4        D4  
.................... //     P5        D5  
.................... //     P6        D6  
.................... //     P7        D7  
.................... //  
.................... //  The SCL and SDA pins should be pull-up resistor as shown below:  
.................... //  
.................... //             +5v  
.................... //               |  
.................... //               <  
.................... //               > 4.7K         
.................... //               <           
.................... //To PIC         |          To i2c slave  
.................... //pin xx ------------------ SDA pin   
.................... //(SDA)                       
.................... //              +5v  
.................... //               |  
.................... //               <  
.................... //               > 4.7K         
.................... //               <           
.................... //To PIC         |          To i2c slave  
.................... //pin xx ------------------ SCL pin   
.................... //(SCL)  
.................... //  
.................... //To PIC                    To i2c slave  
.................... //Vss pin ----------------- Vss or ground pin   
.................... //                |  
.................... //              -----  
.................... //               ---  Ground  
.................... //                -   
.................... //   
.................... // THIS DOCUMENT IS PROVIDED TO THE USER "AS IS"  
.................... //-----------------------------------------------------------------------------  
.................... byte LCD_ADDR ;//             0x4E        //I2C slave address for LCD module  
.................... byte lcd_total_rows ;//       2           //Number of rows: 1,2,3 or 4  
.................... byte lcd_total_columns ;//    16          //Number of columns: 1...20    
....................  
.................... #define RS                    0b00000001  //P0 - PCF8574T Pin connected to RS  
.................... #define RW                    0b00000010  //P1 - PCF8574T Pin connected to RW  
.................... #define ENABLE                0b00000100  //P2 - PCF8574T Pin connected to EN  
.................... #define LCD_BACKLIGHT         0b00001000  //P3 - PCF8574T Pin connected to BACKLIGHT LED  
....................  
.................... #define addr_row_one          0x00        //LCD RAM address for row 1  
.................... #define addr_row_two          0x40        //LCD RAM address for row 2  
.................... #define addr_row_three        0x14        //LCD RAM address for row 3  
.................... #define addr_row_four         0x54        //LCD RAM address for row 4  
....................  
.................... #define ON                    1  
.................... #define OFF                   0  
.................... #define NOT                   ~  
.................... #define data_shifted          data<<4  
.................... int8 new_row_request=1, BACKLIGHT_LED=LCD_BACKLIGHT;  
....................  
.................... void lcd_backlight_led(byte bl)  
.................... {   
....................       If (bl) BACKLIGHT_LED=LCD_BACKLIGHT; else BACKLIGHT_LED=OFF;  
.................... }  
....................  
.................... void i2c_send_nibble(byte data, byte type)  
.................... {     
....................    switch (type)  
004A:  MOVF   3A,W
004B:  XORLW  00
004C:  BTFSC  03.2
004D:  GOTO   052
004E:  XORLW  01
004F:  BTFSC  03.2
0050:  GOTO   075
0051:  GOTO   099
....................    {       
....................       case 0 :       
....................       i2c_write(data_shifted | BACKLIGHT_LED);  
0052:  SWAPF  39,W
0053:  MOVWF  77
0054:  MOVLW  F0
0055:  ANDWF  77,F
0056:  MOVF   77,W
0057:  IORWF  25,W
0058:  MOVWF  3B
0059:  MOVWF  3C
005A:  CALL   03A
....................       delay_cycles(1);  
005B:  NOP
....................       i2c_write(data_shifted | ENABLE | BACKLIGHT_LED );  
005C:  SWAPF  39,W
005D:  MOVWF  77
005E:  MOVLW  F0
005F:  ANDWF  77,F
0060:  MOVF   77,W
0061:  IORLW  04
0062:  IORWF  25,W
0063:  MOVWF  3B
0064:  MOVWF  3C
0065:  CALL   03A
....................       delay_us(2);  
0066:  MOVLW  03
0067:  MOVWF  77
0068:  DECFSZ 77,F
0069:  GOTO   068
....................       i2c_write(data_shifted & NOT ENABLE | BACKLIGHT_LED);  
006A:  SWAPF  39,W
006B:  MOVWF  77
006C:  MOVLW  F0
006D:  ANDWF  77,F
006E:  MOVF   77,W
006F:  ANDLW  FB
0070:  IORWF  25,W
0071:  MOVWF  3B
0072:  MOVWF  3C
0073:  CALL   03A
....................       break;  
0074:  GOTO   099
....................        
....................       case 1 :  
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED);  
0075:  SWAPF  39,W
0076:  MOVWF  77
0077:  MOVLW  F0
0078:  ANDWF  77,F
0079:  MOVF   77,W
007A:  IORLW  01
007B:  IORWF  25,W
007C:  MOVWF  3B
007D:  MOVWF  3C
007E:  CALL   03A
....................       delay_cycles(1);  
007F:  NOP
....................       i2c_write(data_shifted | RS | ENABLE | BACKLIGHT_LED );  
0080:  SWAPF  39,W
0081:  MOVWF  77
0082:  MOVLW  F0
0083:  ANDWF  77,F
0084:  MOVF   77,W
0085:  IORLW  01
0086:  IORLW  04
0087:  IORWF  25,W
0088:  MOVWF  3B
0089:  MOVWF  3C
008A:  CALL   03A
....................       delay_us(2);  
008B:  MOVLW  03
008C:  MOVWF  77
008D:  DECFSZ 77,F
008E:  GOTO   08D
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED);  
008F:  SWAPF  39,W
0090:  MOVWF  77
0091:  MOVLW  F0
0092:  ANDWF  77,F
0093:  MOVF   77,W
0094:  IORLW  01
0095:  IORWF  25,W
0096:  MOVWF  3B
0097:  MOVWF  3C
0098:  CALL   03A
....................       break;  
....................    }  
0099:  RETURN
.................... }  
....................      
.................... void lcd_send_byte(byte data, byte type)  
....................    {  
....................         i2c_start();  
009A:  BSF    03.5
009B:  BSF    11.0
009C:  BTFSC  11.0
009D:  GOTO   09C
....................         i2c_write(LCD_ADDR);  
009E:  BCF    03.5
009F:  MOVF   21,W
00A0:  MOVWF  3C
00A1:  CALL   03A
....................         i2c_send_nibble(data >> 4 , type);  
00A2:  SWAPF  36,W
00A3:  MOVWF  38
00A4:  MOVLW  0F
00A5:  ANDWF  38,F
00A6:  MOVF   38,W
00A7:  MOVWF  39
00A8:  MOVF   37,W
00A9:  MOVWF  3A
00AA:  CALL   04A
....................         i2c_send_nibble(data & 0xf , type);  
00AB:  MOVF   36,W
00AC:  ANDLW  0F
00AD:  MOVWF  38
00AE:  MOVWF  39
00AF:  MOVF   37,W
00B0:  MOVWF  3A
00B1:  CALL   04A
....................         i2c_stop();         
00B2:  BSF    03.5
00B3:  BSF    11.2
00B4:  BTFSC  11.2
00B5:  GOTO   0B4
00B6:  BCF    03.5
00B7:  RETURN
....................    }  
....................  
.................... void lcd_clear()  
.................... {   
....................         lcd_send_byte(0x01,0);  
00B8:  MOVLW  01
00B9:  MOVWF  36
00BA:  CLRF   37
00BB:  CALL   09A
....................         delay_ms(2);  
00BC:  MOVLW  02
00BD:  MOVWF  2F
00BE:  CALL   026
....................         new_row_request=1;  
00BF:  MOVLW  01
00C0:  MOVWF  24
00C1:  RETURN
.................... }  
....................  
.................... void lcd_init(byte ADDR, byte col, byte row)  
.................... {  
....................    byte i; 
....................    byte CONST lcd_type=2;  // 0=5x7, 1=5x10, 2=2 lines  
....................    byte CONST LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; // These bytes need to be sent to the LCD to start it up. 
....................     
....................    LCD_ADDR =ADDR;//             0x4E        //I2C slave address for LCD module  
00C2:  MOVF   2B,W
00C3:  MOVWF  21
....................    lcd_total_rows =row;//       2           //Number of rows: 1,2,3 or 4  
00C4:  MOVF   2D,W
00C5:  MOVWF  22
....................    lcd_total_columns= col ; 
00C6:  MOVF   2C,W
00C7:  MOVWF  23
....................    disable_interrupts(GLOBAL);  
00C8:  BCF    0B.6
00C9:  BCF    0B.7
00CA:  BTFSC  0B.7
00CB:  GOTO   0C9
....................    delay_ms(50); //LCD power up delay  
00CC:  MOVLW  32
00CD:  MOVWF  2F
00CE:  CALL   026
....................      
....................    i2c_start();  
00CF:  BSF    03.5
00D0:  BSF    11.0
00D1:  BTFSC  11.0
00D2:  GOTO   0D1
....................    i2c_write(LCD_ADDR);  
00D3:  BCF    03.5
00D4:  MOVF   21,W
00D5:  MOVWF  3C
00D6:  CALL   03A
....................       i2c_send_nibble(0x00,0);  
00D7:  CLRF   39
00D8:  CLRF   3A
00D9:  CALL   04A
....................       delay_ms(15);  
00DA:  MOVLW  0F
00DB:  MOVWF  2F
00DC:  CALL   026
....................      
....................    for (i=1;i<=3;++i)     
00DD:  MOVLW  01
00DE:  MOVWF  2E
00DF:  MOVF   2E,W
00E0:  SUBLW  03
00E1:  BTFSS  03.0
00E2:  GOTO   0EC
....................    {  
....................       i2c_send_nibble(0x03,0);  
00E3:  MOVLW  03
00E4:  MOVWF  39
00E5:  CLRF   3A
00E6:  CALL   04A
....................       delay_ms(5);  
00E7:  MOVLW  05
00E8:  MOVWF  2F
00E9:  CALL   026
00EA:  INCF   2E,F
00EB:  GOTO   0DF
....................    }     
....................       i2c_send_nibble(0x02,0);  
00EC:  MOVLW  02
00ED:  MOVWF  39
00EE:  CLRF   3A
00EF:  CALL   04A
....................       delay_ms(5);  
00F0:  MOVLW  05
00F1:  MOVWF  2F
00F2:  CALL   026
....................    i2c_stop();  
00F3:  BSF    03.5
00F4:  BSF    11.2
00F5:  BTFSC  11.2
00F6:  GOTO   0F5
....................      
....................    for (i=0;i<=3;++i) {  
00F7:  BCF    03.5
00F8:  CLRF   2E
00F9:  MOVF   2E,W
00FA:  SUBLW  03
00FB:  BTFSS  03.0
00FC:  GOTO   108
....................    lcd_send_byte(LCD_INIT_STRING[i],0);  
00FD:  MOVF   2E,W
00FE:  CALL   004
00FF:  MOVWF  2F
0100:  MOVWF  36
0101:  CLRF   37
0102:  CALL   09A
....................    delay_ms(5);  
0103:  MOVLW  05
0104:  MOVWF  2F
0105:  CALL   026
0106:  INCF   2E,F
0107:  GOTO   0F9
....................    }  
....................    lcd_clear();  //Clear Display  
0108:  CALL   0B8
....................    enable_interrupts(GLOBAL);  
0109:  MOVLW  C0
010A:  IORWF  0B,F
010B:  BCF    0A.3
010C:  BCF    0A.4
010D:  GOTO   260 (RETURN)
.................... }  
....................  
.................... void lcd_gotoxy( byte x, byte y)  
.................... {  
.................... byte row,column,row_addr,lcd_address;  
.................... static char data;  
*
023C:  BCF    03.5
023D:  CLRF   26
....................  
....................    if (y>lcd_total_rows) row=lcd_total_rows; else row=y;  
*
010E:  MOVF   30,W
010F:  SUBWF  22,W
0110:  BTFSC  03.0
0111:  GOTO   115
0112:  MOVF   22,W
0113:  MOVWF  31
0114:  GOTO   117
0115:  MOVF   30,W
0116:  MOVWF  31
....................    
....................    switch(row)  
0117:  MOVF   31,W
0118:  XORLW  01
0119:  BTFSC  03.2
011A:  GOTO   125
011B:  XORLW  03
011C:  BTFSC  03.2
011D:  GOTO   127
011E:  XORLW  01
011F:  BTFSC  03.2
0120:  GOTO   12A
0121:  XORLW  07
0122:  BTFSC  03.2
0123:  GOTO   12D
0124:  GOTO   130
....................    {  
....................       case 1:  row_addr=addr_row_one;     break;  
0125:  CLRF   33
0126:  GOTO   131
....................       case 2:  row_addr=addr_row_two;     break;  
0127:  MOVLW  40
0128:  MOVWF  33
0129:  GOTO   131
....................       case 3:  row_addr=addr_row_three;   break;  
012A:  MOVLW  14
012B:  MOVWF  33
012C:  GOTO   131
....................       case 4:  row_addr=addr_row_four;    break;  
012D:  MOVLW  54
012E:  MOVWF  33
012F:  GOTO   131
....................       default: row_addr=addr_row_one;     break;   
0130:  CLRF   33
....................    }   
....................      
....................    if (x>lcd_total_columns) column=lcd_total_columns; else column=x;   
0131:  MOVF   2F,W
0132:  SUBWF  23,W
0133:  BTFSC  03.0
0134:  GOTO   138
0135:  MOVF   23,W
0136:  MOVWF  32
0137:  GOTO   13A
0138:  MOVF   2F,W
0139:  MOVWF  32
....................    lcd_address=(row_addr+(column-1));  
013A:  MOVLW  01
013B:  SUBWF  32,W
013C:  ADDWF  33,W
013D:  MOVWF  34
....................    lcd_send_byte(0x80|lcd_address,0);  
013E:  MOVF   34,W
013F:  IORLW  80
0140:  MOVWF  35
0141:  MOVWF  36
0142:  CLRF   37
0143:  CALL   09A
0144:  RETURN
.................... }  
....................  
.................... //Display the character on LCD screen.  
.................... void LCD_PUTC(char in_data)  
.................... {     
....................   switch(in_data)  
0145:  MOVF   2E,W
0146:  XORLW  0C
0147:  BTFSC  03.2
0148:  GOTO   150
0149:  XORLW  06
014A:  BTFSC  03.2
014B:  GOTO   152
014C:  XORLW  02
014D:  BTFSC  03.2
014E:  GOTO   15F
014F:  GOTO   164
....................    {   
....................      case '\f': lcd_clear();                       break;                 
0150:  CALL   0B8
0151:  GOTO   169
....................        
....................      case '\n':  
....................      new_row_request++;  
0152:  INCF   24,F
....................      if (new_row_request>lcd_total_rows) new_row_request=1;  
0153:  MOVF   24,W
0154:  SUBWF  22,W
0155:  BTFSC  03.0
0156:  GOTO   159
0157:  MOVLW  01
0158:  MOVWF  24
....................      lcd_gotoxy(1, new_row_request);  
0159:  MOVLW  01
015A:  MOVWF  2F
015B:  MOVF   24,W
015C:  MOVWF  30
015D:  CALL   10E
....................      break;  
015E:  GOTO   169
....................                    
....................      case '\b': lcd_send_byte(0x10,0);             break;  
015F:  MOVLW  10
0160:  MOVWF  36
0161:  CLRF   37
0162:  CALL   09A
0163:  GOTO   169
....................          
....................      default: lcd_send_byte(in_data,1);            break;       
0164:  MOVF   2E,W
0165:  MOVWF  36
0166:  MOVLW  01
0167:  MOVWF  37
0168:  CALL   09A
....................        
....................    }  
0169:  RETURN
.................... }  
....................  
....................  
....................  
.................... int selection=0;// 0:stop, 1:velocidad 1, 2: velocidad 2: 3:velocidad 3 
.................... int control=0; 
.................... void cambioEstado(); 
.................... void movMotores(); 
.................... void main() 
*
020F:  MOVF   03,W
0210:  ANDLW  1F
0211:  MOVWF  03
0212:  MOVLW  81
0213:  BSF    03.5
0214:  MOVWF  19
0215:  MOVLW  A6
0216:  MOVWF  18
0217:  MOVLW  90
0218:  BCF    03.5
0219:  MOVWF  18
021A:  MOVLW  FF
021B:  MOVWF  20
021C:  BSF    20.3
021D:  MOVF   20,W
021E:  BSF    03.5
021F:  MOVWF  07
0220:  BCF    03.5
0221:  BSF    20.4
0222:  MOVF   20,W
0223:  BSF    03.5
0224:  MOVWF  07
0225:  MOVLW  31
0226:  MOVWF  13
0227:  MOVLW  28
0228:  BCF    03.5
0229:  MOVWF  14
022A:  BSF    03.5
022B:  BSF    14.7
022C:  BCF    14.6
022D:  MOVLW  01
022E:  BCF    03.5
022F:  MOVWF  24
0230:  MOVLW  08
0231:  MOVWF  25
0232:  CLRF   27
0233:  CLRF   28
0234:  CLRF   2A
0235:  CLRF   29
0236:  BSF    03.5
0237:  BSF    1F.0
0238:  BSF    1F.1
0239:  BSF    1F.2
023A:  BCF    1F.3
023B:  BCF    03.7
.................... { 
....................    setup_timer_2(t2_div_by_16,255,1);//predivisor de 16, PR2=255,  con esto tenemos un periodo de 0.8192ms y frecuencia de 1.22kHZ 
023E:  MOVLW  00
023F:  MOVWF  78
0240:  IORLW  06
0241:  MOVWF  12
0242:  MOVLW  FF
0243:  BSF    03.5
0244:  MOVWF  12
....................    setup_ccp1(ccp_pwm); 
0245:  BCF    03.5
0246:  BCF    20.2
0247:  MOVF   20,W
0248:  BSF    03.5
0249:  MOVWF  07
024A:  BCF    03.5
024B:  BCF    07.2
024C:  MOVLW  0C
024D:  MOVWF  17
....................    output_b(0xFF); //habilitmaos el puerto B como entradas 
024E:  BSF    03.5
024F:  CLRF   06
0250:  MOVLW  FF
0251:  BCF    03.5
0252:  MOVWF  06
....................    set_tris_b(0xF0); //4 bits menos significativos como salida y los 4 bits más significativos como entrada 
0253:  MOVLW  F0
0254:  BSF    03.5
0255:  MOVWF  06
....................    //=== LCD === 
....................    output_d(0x00);             //muestra cero en el display. 
0256:  CLRF   08
0257:  BCF    03.5
0258:  CLRF   08
....................    lcd_init(0x4E,16,2);       // Ajustar de acuerdo a las conexiones (consultar imagen) 
0259:  MOVLW  4E
025A:  MOVWF  2B
025B:  MOVLW  10
025C:  MOVWF  2C
025D:  MOVLW  02
025E:  MOVWF  2D
025F:  GOTO   0C2
....................     
....................     
....................    while(true)//loop infinito 
....................    { 
....................       if(!input(PIN_B4)){ 
0260:  BSF    03.5
0261:  BSF    06.4
0262:  BCF    03.5
0263:  BTFSC  06.4
0264:  GOTO   26B
....................          selection=0;   //posicionamos el cursor al origen del menú 
0265:  CLRF   27
....................          control=1; 
0266:  MOVLW  01
0267:  MOVWF  28
....................          delay_ms(100); //retraso de 100ms para evitar movimientos inesperados 
0268:  MOVLW  64
0269:  MOVWF  2F
026A:  CALL   026
....................       } 
....................       if(!input(PIN_B5)){ 
026B:  BSF    03.5
026C:  BSF    06.5
026D:  BCF    03.5
026E:  BTFSC  06.5
026F:  GOTO   276
....................          selection=1;   //posicionamos el cursor al origen del menú 
0270:  MOVLW  01
0271:  MOVWF  27
....................          control=1; 
0272:  MOVWF  28
....................          delay_ms(100); //retraso de 100ms para evitar movimientos inesperados 
0273:  MOVLW  64
0274:  MOVWF  2F
0275:  CALL   026
....................       } 
....................       if(!input(PIN_B6)){ 
0276:  BSF    03.5
0277:  BSF    06.6
0278:  BCF    03.5
0279:  BTFSC  06.6
027A:  GOTO   282
....................          selection=2;   //posicionamos el cursor al origen del menú 
027B:  MOVLW  02
027C:  MOVWF  27
....................          control=1; 
027D:  MOVLW  01
027E:  MOVWF  28
....................          delay_ms(100); //retraso de 100ms para evitar movimientos inesperados 
027F:  MOVLW  64
0280:  MOVWF  2F
0281:  CALL   026
....................       } 
....................       If(!input(PIN_B7)){ 
0282:  BSF    03.5
0283:  BSF    06.7
0284:  BCF    03.5
0285:  BTFSC  06.7
0286:  GOTO   28E
....................          selection=3;   //posicionamos el cursor al origen del menú 
0287:  MOVLW  03
0288:  MOVWF  27
....................          control=1; 
0289:  MOVLW  01
028A:  MOVWF  28
....................          delay_ms(100); //retraso de 100ms para evitar movimientos inesperados 
028B:  MOVLW  64
028C:  MOVWF  2F
028D:  CALL   026
....................       } 
....................       if(control==1){ 
028E:  DECFSZ 28,W
028F:  GOTO   295
....................          printf(lcd_putc,"\f"); //limpia pantalla LCD 
0290:  MOVLW  0C
0291:  MOVWF  2E
0292:  CALL   145
....................          cambioEstado(); 
0293:  GOTO   1C0
....................           
....................          control=0; 
0294:  CLRF   28
....................       } 
....................        
....................       if(selection==0){ 
0295:  MOVF   27,F
0296:  BTFSS  03.2
0297:  GOTO   29D
....................          output_b(0x00); 
0298:  BSF    03.5
0299:  CLRF   06
029A:  BCF    03.5
029B:  CLRF   06
....................       }else{ 
029C:  GOTO   2A9
....................          output_bit(PIN_B0,0); 
029D:  BCF    06.0
029E:  BSF    03.5
029F:  BCF    06.0
....................          output_bit(PIN_B1,input_state(pin_C2)); 
02A0:  BCF    03.5
02A1:  BTFSC  07.2
02A2:  GOTO   2A5
02A3:  BCF    06.1
02A4:  GOTO   2A6
02A5:  BSF    06.1
02A6:  BSF    03.5
02A7:  BCF    06.1
02A8:  BCF    03.5
....................       } 
02A9:  GOTO   260
....................    } 
.................... } 
.................... void cambioEstado(){ 
02AA:  SLEEP
....................    switch(selection){ 
*
01C0:  MOVF   27,W
01C1:  XORLW  00
01C2:  BTFSC  03.2
01C3:  GOTO   1CE
01C4:  XORLW  01
01C5:  BTFSC  03.2
01C6:  GOTO   1DE
01C7:  XORLW  03
01C8:  BTFSC  03.2
01C9:  GOTO   1EC
01CA:  XORLW  01
01CB:  BTFSC  03.2
01CC:  GOTO   1FA
01CD:  GOTO   208
....................       case 0:  
....................          output_b(0x00); 
01CE:  BSF    03.5
01CF:  CLRF   06
01D0:  BCF    03.5
01D1:  CLRF   06
....................          lcd_gotoxy(1,1); 
01D2:  MOVLW  01
01D3:  MOVWF  2F
01D4:  MOVWF  30
01D5:  CALL   10E
....................          printf(lcd_putc," Alto \n "); 
01D6:  MOVLW  0C
01D7:  BSF    03.6
01D8:  MOVWF  0D
01D9:  MOVLW  00
01DA:  MOVWF  0F
01DB:  BCF    03.6
01DC:  CALL   16A
....................          break; 
01DD:  GOTO   20C
....................       case 1: 
....................          set_pwm1_duty(120); 
01DE:  MOVLW  78
01DF:  MOVWF  15
....................          lcd_gotoxy(1,1); 
01E0:  MOVLW  01
01E1:  MOVWF  2F
01E2:  MOVWF  30
01E3:  CALL   10E
....................          printf(lcd_putc,"  Nivel 1 \n "); 
01E4:  MOVLW  11
01E5:  BSF    03.6
01E6:  MOVWF  0D
01E7:  MOVLW  00
01E8:  MOVWF  0F
01E9:  BCF    03.6
01EA:  CALL   16A
....................          break;    
01EB:  GOTO   20C
....................       case 2:   
....................          set_pwm1_duty(180); 
01EC:  MOVLW  B4
01ED:  MOVWF  15
....................          lcd_gotoxy(1,1); 
01EE:  MOVLW  01
01EF:  MOVWF  2F
01F0:  MOVWF  30
01F1:  CALL   10E
....................          printf(lcd_putc,"  Nivel 2 \n "); 
01F2:  MOVLW  18
01F3:  BSF    03.6
01F4:  MOVWF  0D
01F5:  MOVLW  00
01F6:  MOVWF  0F
01F7:  BCF    03.6
01F8:  CALL   16A
....................          break; 
01F9:  GOTO   20C
....................       case 3:   
....................          set_pwm1_duty(250); 
01FA:  MOVLW  FA
01FB:  MOVWF  15
....................          lcd_gotoxy(1,1); 
01FC:  MOVLW  01
01FD:  MOVWF  2F
01FE:  MOVWF  30
01FF:  CALL   10E
....................          printf(lcd_putc,"  Nivel 3 \n "); 
0200:  MOVLW  1F
0201:  BSF    03.6
0202:  MOVWF  0D
0203:  MOVLW  00
0204:  MOVWF  0F
0205:  BCF    03.6
0206:  CALL   16A
....................          break; 
0207:  GOTO   20C
....................       default: 
....................          break; 
0208:  GOTO   20C
....................       delay_ms(100); 
0209:  MOVLW  64
020A:  MOVWF  2F
020B:  CALL   026
....................    } 
020C:  BCF    0A.3
020D:  BCF    0A.4
020E:  GOTO   294 (RETURN)
....................  
.................... } 
.................... void movMotores(){ 
....................    switch(selection){ 
....................       case 0:  
....................          output_b(0x00); 
....................          //lcd_gotoxy(1,1);  
....................          //printf(lcd_putc,"Alto"); 
....................          break; 
....................       case 1: 
....................          set_pwm1_duty(120); 
....................          //printf(lcd_putc,"Nivel 1"); 
....................          break;    
....................       case 2:   
....................          set_pwm1_duty(180); 
....................          //printf(lcd_putc,"Nivel 2"); 
....................          break; 
....................       case 3:   
....................          set_pwm1_duty(250); 
....................          //printf(lcd_putc,"Nivel 3"); 
....................          break; 
....................       default: 
....................          break; 
....................       delay_ms(100); 
....................    } 
.................... } 

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
